{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Tabulator for Python","text":"<p>Tabulator for Python provides Shiny for Python bindings for Tabulator JS.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install git+https://github.com/eodaGmbH/py-tabulator\n</code></pre>"},{"location":"#basic-usage","title":"Basic usage","text":"<p>Shiny Express example:</p> <pre><code>import pandas as pd\nfrom pytabulator import TableOptions, render_data_frame\nfrom shiny import render\nfrom shiny.express import input, ui\n\nui.div(\"Click on row to print name\", style=\"padding: 10px;\")\n\n\n@render.code\nasync def txt():\n    print(input.tabulator_row_clicked())\n    return input.tabulator_row_clicked()[\"Name\"]\n\n\n@render_data_frame(table_options=TableOptions(height=500))\ndef tabulator():\n    return pd.read_csv(\n        \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n    )\n</code></pre> <pre><code>shiny run docs/examples/getting_started/shiny_express_all.py\n</code></pre>"},{"location":"api/","title":"API Documentation","text":""},{"location":"api/#basic-usage","title":"Basic usage","text":"<pre><code>import pandas as pd\nfrom pytabulator import TableOptions, render_data_frame\nfrom shiny import render\nfrom shiny.express import input, ui\n\nui.div(\"Click on row to print name\", style=\"padding: 10px;\")\n\n\n@render.code\nasync def txt():\n    print(input.tabulator_row_clicked())\n    return input.tabulator_row_clicked()[\"Name\"]\n\n\n@render_data_frame(table_options=TableOptions(height=500))\ndef tabulator():\n    return pd.read_csv(\n        \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n    )\n</code></pre> <p>See also detailed example.</p>"},{"location":"api/#pytabulator","title":"<code>pytabulator</code>","text":""},{"location":"api/#pytabulator.render_tabulator","title":"<code>render_tabulator</code>","text":"<p>             Bases: <code>Renderer[Tabulator]</code></p> <p>A decorator for a function that returns a <code>Tabulator</code> table</p> Source code in <code>pytabulator/shiny_bindings.py</code> <pre><code>class render_tabulator(Renderer[Tabulator]):\n    \"\"\"A decorator for a function that returns a `Tabulator` table\"\"\"\n\n    def auto_output_ui(self) -&gt; Tag:\n        return output_tabulator(self.output_id)\n\n    async def transform(self, value: Tabulator) -&gt; Jsonifiable:\n        # return {\"values\": value.values.tolist(), \"columns\": value.columns.tolist()}\n        # TODO: convert with js\n        return value.to_dict()\n</code></pre>"},{"location":"api/#pytabulator.render_data_frame","title":"<code>render_data_frame</code>","text":"<p>             Bases: <code>Renderer[DataFrame]</code></p> <p>A decorator for a function that returns a <code>DataFrame</code></p> <p>Parameters:</p> Name Type Description Default <code>table_options</code> <code>TableOptions</code> <p>Table options.</p> <code>TableOptions()</code> Source code in <code>pytabulator/shiny_bindings.py</code> <pre><code>class render_data_frame(Renderer[DataFrame]):\n    \"\"\"A decorator for a function that returns a `DataFrame`\n\n    Args:\n        table_options (TableOptions): Table options.\n    \"\"\"\n\n    editor: bool\n\n    def auto_output_ui(self) -&gt; Tag:\n        return output_tabulator(self.output_id)\n\n    def __init__(\n        self,\n        _fn: ValueFn[DataFrame] = None,\n        *,\n        table_options: TableOptions | TabulatorOptions = TableOptions(),\n    ) -&gt; None:\n        super().__init__(_fn)\n        self.table_options = table_options\n\n    async def render(self) -&gt; Jsonifiable:\n        df = await self.fn()\n        # return {\"values\": value.values.tolist(), \"columns\": value.columns.tolist()}\n        # TODO: convert with js\n        data = df_to_dict(df)\n        data[\"options\"] = (\n            asdict(self.table_options)\n            if isinstance(self.table_options, TabulatorOptions)\n            else self.table_options.model_dump(by_alias=True)\n        )\n        return data\n</code></pre>"},{"location":"api/#pytabulator.TableOptions","title":"<code>TableOptions</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Table options</p> <p>Attributes:</p> Name Type Description <code>index</code> <code>str</code> <p>The index of the table. Defaults to <code>id</code>.</p> <code>header_visible</code> <code>bool</code> <p>Whether to display the header of the table. Defaults to <code>True</code>.</p> <code>movable_rows</code> <code>bool</code> <p>Whether rows are movable or not. Defaults to <code>False</code>.</p> <code>group_by</code> <code>Union[str, list]</code> <p>Columns to group by. Defaults to <code>None</code>.</p> <code>height</code> <code>int</code> <p>Height in px. Defaults to <code>300</code>.</p> <code>pagination</code> <code>bool</code> <p>Whether to enable pagination. Defaults to <code>False</code>.</p> <code>pagination_add_row</code> <code>Literal['page', 'table']</code> <p>Where to add rows when pagination is enabled. Defaults to <code>page</code>.</p> <code>selectable</code> <code>Union[str, bool, int]</code> <p>Whether a row is selectable. An integer value sets the maximum number of rows, that can be selected. If set to <code>highlight</code>, rows do not change state when clicked. Defaults to <code>highlight</code>.</p> <code>columns</code> <code>list</code> <p>Columns configuration. Defaults to <code>None</code>, which means that the default configuration is used.</p> <code>layout</code> <code>Literal['fitData', 'fitDataFill', 'fitDataStretch', 'fitDataTable', 'fitColumns']</code> <p>The layout of the table. Defaults to <code>fitColumns</code>.</p> <code>add_row_pos</code> <code>Literal['bottom', 'top']</code> <p>Where to add rows. Defaults to <code>bottom</code>.</p> <code>frozen_rows</code> <code>int</code> <p>Number of frozen rows. Defaults to <code>\u01f8one</code>.</p> <code>row_height</code> <code>int</code> <p>Fixed height of rows. Defaults to <code>None</code>.</p> <code>history</code> <code>bool</code> <p>Whether to enable history. Must be set if <code>undo</code> and <code>redo</code> is used. Defaults to <code>False</code>.</p> Note <p>See Tabulator Setup Options for details.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from pytabulator import TableOptions\n</code></pre> <pre><code>&gt;&gt;&gt; table_options = TableOptions(height=500, pagination=True)\n</code></pre> Source code in <code>pytabulator/tabulator.py</code> <pre><code>class TableOptions(BaseModel):\n    \"\"\"Table options\n\n    Attributes:\n        index (str, optional): The index of the table. Defaults to `id`.\n        header_visible (bool, optional): Whether to display the header of the table. Defaults to `True`.\n        movable_rows (bool, optional): Whether rows are movable or not. Defaults to `False`.\n        group_by: Columns to group by. Defaults to `None`.\n        height (int, optional): Height in px. Defaults to `300`.\n        pagination (bool, optional): Whether to enable pagination. Defaults to `False`.\n        pagination_add_row: Where to add rows when pagination is enabled. Defaults to `page`.\n        selectable: Whether a row is selectable. An integer value sets the maximum number of rows, that can be selected.\n            If set to `highlight`, rows do not change state when clicked. Defaults to `highlight`.\n        columns (list, optional): Columns configuration. Defaults to `None`,\n            which means that the default configuration is used.\n        layout: The layout of the table. Defaults to `fitColumns`.\n        add_row_pos: Where to add rows. Defaults to `bottom`.\n        frozen_rows (int, optional): Number of frozen rows. Defaults to `\u01f8one`.\n        row_height: Fixed height of rows. Defaults to `None`.\n        history (bool, optional): Whether to enable history. Must be set if `undo` and `redo` is used. Defaults to `False`.\n\n    Note:\n        See [Tabulator Setup Options](https://tabulator.info/docs/5.5/options) for details.\n\n    Examples:\n        &gt;&gt;&gt; from pytabulator import TableOptions\n\n        &gt;&gt;&gt; table_options = TableOptions(height=500, pagination=True)\n    \"\"\"\n\n    index: str = \"id\"\n    header_visible: bool = Field(True, serialization_alias=\"headerVisible\")\n    movable_rows: bool = Field(False, serialization_alias=\"movableRows\")\n    group_by: Union[str, list] = Field(None, serialization_alias=\"groupBy\")\n    height: Union[int, str] = None\n    pagination: bool = False\n    pagination_add_row: Literal[\"page\", \"table\"] = Field(\n        \"page\", serialization_alias=\"paginationAddRow\"\n    )\n    selectable: Union[str, bool, int] = \"highlight\"\n    columns: list = None\n    layout: Literal[\n        \"fitData\", \"fitDataFill\", \"fitDataStretch\", \"fitDataTable\", \"fitColumns\"\n    ] = \"fitColumns\"\n    add_row_pos: Literal[\"bottom\", \"top\"] = Field(\n        \"bottom\", serialization_alias=\"addRowPos\"\n    )\n    frozen_rows: int = Field(None, serialization_alias=\"frozenRows\")\n    row_height: int = Field(None, serialization_alias=\"rowHeight\")\n    resizable_column_fit: bool = Field(False, serialization_alias=\"resizableColumnFit\")\n    history: bool = False\n\n    @field_validator(\"height\")\n    def validate_height(cls, v):\n        if isinstance(v, int):\n            return f\"{v}px\"\n\n        return v\n\n    def to_dict(self) -&gt; dict:\n        return self.model_dump(by_alias=True, exclude_none=True)\n</code></pre>"},{"location":"api/#pytabulator.Tabulator","title":"<code>Tabulator</code>","text":"<p>             Bases: <code>object</code></p> <p>Tabulator</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>A data frame.</p> required <code>table_options</code> <code>TableOptions</code> <p>Table options.</p> <code>None</code> Source code in <code>pytabulator/tabulator.py</code> <pre><code>class Tabulator(object):\n    \"\"\"Tabulator\n\n    Args:\n        df (DataFrame): A data frame.\n        table_options (TableOptions): Table options.\n    \"\"\"\n\n    def __init__(\n        self,\n        df: DataFrame,\n        table_options: TableOptions | dict | TabulatorOptions = None,\n    ) -&gt; None:\n        self.df = df\n        if isinstance(table_options, TableOptions):\n            table_options = table_options.model_dump(by_alias=True)\n        # Legacy\n        elif isinstance(table_options, TabulatorOptions):\n            warn(\n                \"'TabulatorOptions' is deprecated and will be removed in one of the next releases. Use 'TableOptions' instead.\",\n                DeprecationWarning,\n                stacklevel=2,\n            )\n            table_options = asdict(table_options)\n\n        self.table_options = table_options\n\n    def to_dict(self) -&gt; dict:\n        data = df_to_dict(self.df)\n        data[\"options\"] = self.table_options\n        return data\n</code></pre>"},{"location":"api/#pytabulator.TabulatorContext","title":"<code>TabulatorContext</code>","text":"<p>             Bases: <code>object</code></p> <p>Table context</p> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>class TabulatorContext(object):\n    \"\"\"Table context\"\"\"\n\n    def __init__(self, id: str, session: Session = None) -&gt; None:\n        self.id = id\n        self._session = require_active_session(session)\n        self._message_queue = []\n\n    async def __aenter__(self):\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        await self.render()\n\n    async def render(self):\n        await self._session.send_custom_message(\n            f\"tabulator-{self.id}\", {\"id\": self.id, \"calls\": self._message_queue}\n        )\n\n    def add_call(self, method_name: str, *args) -&gt; None:\n        \"\"\"Add a method call that is executed on the table instance\n\n        Args:\n            method_name (str): The name of the method to be executed.\n            *args (any): The arguments to be passed to the table method.\n        \"\"\"\n        call = [method_name, args]\n        self._message_queue.append(call)\n\n    def trigger_download(\n        self, type: Literal[\"csv\", \"json\"] = \"csv\", file_name: str = None\n    ) -&gt; None:\n        \"\"\"Trigger download\n\n        Args:\n            type (str): The data type of file to be downloaded.\n            file_name (str): The file name.\n        \"\"\"\n        if not file_name:\n            file_name = f\"tabulator-data.{type}\"\n\n        self.add_call(\"download\", type, file_name)\n\n    def add_row(self, row: dict = {}) -&gt; None:\n        \"\"\"Add a row to the table\n\n        Args:\n            row (dict): Row data to add.\n        \"\"\"\n        self.add_call(\"addRow\", row)\n\n    def delete_row(self, index: int | str) -&gt; None:\n        \"\"\"Delete a row from the table\n\n        Args:\n            index: The index of the row to delete.\n        \"\"\"\n        self.add_call(\"deleteRow\", index)\n\n    def delete_selected_rows(self) -&gt; None:\n        \"\"\"Delete selected rows from table\"\"\"\n        self.add_call(\"deleteSelectedRows\")\n\n    def undo(self) -&gt; None:\n        \"\"\"Trigger undo\"\"\"\n        self.add_call(\"undo\")\n\n    def redo(self) -&gt; None:\n        \"\"\"Trigger redo\"\"\"\n        self.add_call(\"redo\")\n\n    def trigger_get_data(self) -&gt; None:\n        \"\"\"Trigger sending data\"\"\"\n        self.add_call(\"getData\")\n</code></pre>"},{"location":"api/#pytabulator.TabulatorContext.add_call","title":"<code>add_call(method_name, *args)</code>","text":"<p>Add a method call that is executed on the table instance</p> <p>Parameters:</p> Name Type Description Default <code>method_name</code> <code>str</code> <p>The name of the method to be executed.</p> required <code>*args</code> <code>any</code> <p>The arguments to be passed to the table method.</p> <code>()</code> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def add_call(self, method_name: str, *args) -&gt; None:\n    \"\"\"Add a method call that is executed on the table instance\n\n    Args:\n        method_name (str): The name of the method to be executed.\n        *args (any): The arguments to be passed to the table method.\n    \"\"\"\n    call = [method_name, args]\n    self._message_queue.append(call)\n</code></pre>"},{"location":"api/#pytabulator.TabulatorContext.add_row","title":"<code>add_row(row={})</code>","text":"<p>Add a row to the table</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>dict</code> <p>Row data to add.</p> <code>{}</code> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def add_row(self, row: dict = {}) -&gt; None:\n    \"\"\"Add a row to the table\n\n    Args:\n        row (dict): Row data to add.\n    \"\"\"\n    self.add_call(\"addRow\", row)\n</code></pre>"},{"location":"api/#pytabulator.TabulatorContext.delete_row","title":"<code>delete_row(index)</code>","text":"<p>Delete a row from the table</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int | str</code> <p>The index of the row to delete.</p> required Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def delete_row(self, index: int | str) -&gt; None:\n    \"\"\"Delete a row from the table\n\n    Args:\n        index: The index of the row to delete.\n    \"\"\"\n    self.add_call(\"deleteRow\", index)\n</code></pre>"},{"location":"api/#pytabulator.TabulatorContext.delete_selected_rows","title":"<code>delete_selected_rows()</code>","text":"<p>Delete selected rows from table</p> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def delete_selected_rows(self) -&gt; None:\n    \"\"\"Delete selected rows from table\"\"\"\n    self.add_call(\"deleteSelectedRows\")\n</code></pre>"},{"location":"api/#pytabulator.TabulatorContext.redo","title":"<code>redo()</code>","text":"<p>Trigger redo</p> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def redo(self) -&gt; None:\n    \"\"\"Trigger redo\"\"\"\n    self.add_call(\"redo\")\n</code></pre>"},{"location":"api/#pytabulator.TabulatorContext.trigger_download","title":"<code>trigger_download(type='csv', file_name=None)</code>","text":"<p>Trigger download</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str</code> <p>The data type of file to be downloaded.</p> <code>'csv'</code> <code>file_name</code> <code>str</code> <p>The file name.</p> <code>None</code> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def trigger_download(\n    self, type: Literal[\"csv\", \"json\"] = \"csv\", file_name: str = None\n) -&gt; None:\n    \"\"\"Trigger download\n\n    Args:\n        type (str): The data type of file to be downloaded.\n        file_name (str): The file name.\n    \"\"\"\n    if not file_name:\n        file_name = f\"tabulator-data.{type}\"\n\n    self.add_call(\"download\", type, file_name)\n</code></pre>"},{"location":"api/#pytabulator.TabulatorContext.trigger_get_data","title":"<code>trigger_get_data()</code>","text":"<p>Trigger sending data</p> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def trigger_get_data(self) -&gt; None:\n    \"\"\"Trigger sending data\"\"\"\n    self.add_call(\"getData\")\n</code></pre>"},{"location":"api/#pytabulator.TabulatorContext.undo","title":"<code>undo()</code>","text":"<p>Trigger undo</p> Source code in <code>pytabulator/tabulator_context.py</code> <pre><code>def undo(self) -&gt; None:\n    \"\"\"Trigger undo\"\"\"\n    self.add_call(\"undo\")\n</code></pre>"},{"location":"api/#pytabulator.output_tabulator","title":"<code>output_tabulator(id)</code>","text":"<p>Create an output container for a <code>Tabulator</code> table</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>An output id of a <code>Tabulator</code> table.</p> required Source code in <code>pytabulator/shiny_bindings.py</code> <pre><code>def output_tabulator(id: str):\n    \"\"\"Create an output container for a `Tabulator` table\n\n    Args:\n        id (str): An output id of a `Tabulator` table.\n    \"\"\"\n    return ui.div(\n        tabulator_dep,\n        tabulator_bindings_dep,\n        id=resolve_id(id),\n        class_=\"shiny-tabulator-output\",\n    )\n</code></pre>"},{"location":"changelog/","title":"Changelog for Tabular for Python","text":""},{"location":"changelog/#pytabular-v020","title":"pytabular v0.2.0","text":"<ul> <li>Add docs</li> <li>Rename <code>TabulatorOptions</code> to <code>TableOptions</code></li> <li>Use Pydantic for <code>TableOptions</code></li> <li>Add more <code>input</code> events</li> </ul>"},{"location":"changelog/#pytabular-v010-2024-01-31-pre-release","title":"pytabular v0.1.0 (2024-01-31, Pre-release)","text":"<p>Initial release</p>"},{"location":"columns/","title":"Columns and filters","text":"<p>With the <code>columns</code> argument of <code>TableOptions</code> you can configure the columns of the table.</p> <p>See Tabulator JS columns docs for a complete list of available setup options.</p>"},{"location":"columns/#default-definition","title":"Default definition","text":"<p>If no <code>columns</code> arguments is provided, <code>title</code> and <code>field</code> is set to the column name of the data frame. Furthermore, the alignment is set to <code>right</code> for numeric columns.</p> <pre><code>from pandas import DataFrame\nfrom pytabulator import render_data_frame\n\ndata = [[\"Peter\", 10], [\"Hans\", 12]]\n\ndf = DataFrame(data, columns=[\"Name\", \"Age\"])\n\n@render_data_frame\ndef tabulator():\n    return df\n</code></pre> <p>The following definition is created by default for the above data frame:</p> <pre><code>columns = [\n    {\"title\": \"Name\", \"field\": \"Name\", \"horizAlign\": \"left\"},\n    {\"title\": \"Age\", \"field\": \"Age\", \"horizAlign\": \"right\"}\n]\n</code></pre>"},{"location":"columns/#calculations","title":"Calculations","text":"<p>Calculations can be set with the <code>bottomCalc</code> parameter:</p> <pre><code>from pytabulator import TableOptions\n\ncolumns = [\n    {\"title\": \"Name\", \"field\": \"Name\", \"horizAlign\": \"left\"},\n    {\"title\": \"Age\", \"field\": \"Age\", \"horizAlign\": \"right\", \"bottomCalc\": \"avg\"}\n]\n\ntable_options = TableOptions(columns=columns)\n</code></pre>"},{"location":"columns/#filters","title":"Filters","text":"<p>You can add a filter to the columns with the <code>headerFilter</code> parameter:</p> <pre><code>from pytabulator import TableOptions\n\ncolumns = [\n    {\n        \"title\": \"Name\",\n        \"field\": \"Name\",\n        \"horizAlign\": \"left\",\n        \"headerFilter\": True\n    },\n    {\n        \"title\": \"Age\",\n        \"field\": \"Age\",\n        \"horizAlign\": \"right\",\n        \"bottomCalc\": \"avg\",\n        \"headerFilter\": \"number\"\n    }\n]\n\ntable_options = TableOptions(columns=columns)\n</code></pre> <p>Shiny Express example:</p> <pre><code>import pandas as pd\nfrom pytabulator import TableOptions, Tabulator, TabulatorContext, render_tabulator\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n)\n\n# Setup\n#\ncolumns = [\n    {\n        \"title\": \"Name\",\n        \"field\": \"Name\",\n        \"headerFilter\": True,\n        \"headerFilterPlaceholder\": \"Find a Person...\",\n        # \"headerFilterLiveFilter\": False,\n    },\n    {\n        \"title\": \"Survived\",\n        \"field\": \"Survived\",\n        \"hozAlign\": \"right\",\n        \"headerFilter\": \"list\",\n        \"headerFilterParams\": {\n            \"values\": {\n                \"1\": \"Survived\",\n                \"0\": \"Died\",\n            },\n            \"clearable\": True,\n        },\n    },\n]\n\ntable_options = TableOptions(\n    height=600, pagination=True, layout=\"fitDataTable\", columns=columns\n)\n\n# Shiny Express app\n#\nui.div(\n    ui.input_action_button(\"clear_filter\", \"Clear Filter\"),\n    style=\"padding-bottom: 10px; padding-top: 10px;\",\n)\n\n\n@reactive.Effect\n@reactive.event(input.clear_filter)\nasync def clear_filter():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.add_call(\"clearHeaderFilter\")\n\n\n@render.code\nasync def txt():\n    print(input.tabulator_data_filtered())\n    return f\"Number of search result: {len(input.tabulator_data_filtered())}\"\n\n\n@render_tabulator\ndef tabulator():\n    return Tabulator(df, table_options)\n</code></pre>"},{"location":"columns/#editor","title":"Editor","text":"<p>Set <code>editor</code> to <code>True</code> to make the cells of a column editable:</p> <pre><code>columns = [\n    {\"title\": \"Name\", \"field\": \"Name\", \"horizAlign\": \"left\", \"editor\": True},\n    {\"title\": \"Age\", \"field\": \"Age\", \"horizAlign\": \"right\", \"editor\": True}\n]\n</code></pre>"},{"location":"events/","title":"Events and triggers","text":""},{"location":"events/#events","title":"Events","text":"<p>Tabulator for Python provides the following reactive inputs:</p> <ul> <li><code>input.{output_id}_row_clicked</code> event: Sends the data of the clicked row.</li> <li><code>input.{output_id}_row_edited</code> event: Sends the data of the edited row. This event is fired each time a cell of the row is edited.</li> <li><code>input.{output_id}_rows_selected</code> event: Sends the data of all selected rows. This event is fired each time a new row is selected.</li> <li><code>input.{output_id}_data</code> event: Sends the complete data of the table. This event must be triggered from Shiny.</li> <li><code>input.{output_id}_data_filtered</code> event: Sends data of filtered rows. This event is triggered each time a filter is applied.</li> </ul> <pre><code>from shiny import render\nfrom pandas import read_csv\nfrom pytabulator import render_data_frame\n\n\n# in this case (Shiny Express) the function name corresponds to the 'output_id'\n# output_id = \"tabulator\"\n#\n# on-row-clicked event: input.tabulator_row_clicked\n# on-row-edited event: input.tabulator_row_edited\n#\n@render_data_frame\ndef tabulator():\n    return read_csv(\"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\")\n\n\n# row-on-click event\n#\n@render.code\nasync def txt():\n    print(input.tabulator_row_clicked())\n    return input.tabulator_row_clicked()[\"Name\"]\n\n\n# row-edited event\n#\n@render.code\ndef row_edited():\n    data = input.tabulator_row_edited()\n    print(data)\n    return f\"{data['Name']}, {data['Sex']}\"\n</code></pre>"},{"location":"events/#triggers","title":"Triggers","text":"<p>With <code>TabulatorContext</code> you can trigger events on the <code>table</code> object. <code>TabulatorContext</code> must be used in an async function:</p> <pre><code>from shiny import reactive\nfrom shiny.express import ui\nfrom pytabulator import TabulatorContext\n\nui.input_action_button(\"trigger_download\", \"Download\")\nui.input_action_button(\"add_row\", \"Add row\")\n\n\n# Trigger download of csv file\n#\n@reactive.Effect\n@reactive.event(input.trigger_download)\nasync def trigger_download():\n    print(\"download triggered\")\n    async with TabulatorContext(\"tabulator\") as table:\n        table.trigger_download(\"csv\")\n\n\n# Add a row to the table\n#\n@reactive.Effect\n@reactive.event(input.add_row)\nasync def add_row():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.add_row({\"Name\": \"Hans\", \"Sex\": \"male\"})\n</code></pre>"},{"location":"events/#detailed-example","title":"Detailed example","text":"<pre><code>from random import randrange\n\nimport pandas as pd\nfrom pytabulator import TableOptions, Tabulator, TabulatorContext, render_tabulator\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\n# Fetch data\n#\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n)\n\n# Setup\n#\ntable_options = TableOptions(\n    height=400,\n    pagination=True,\n    pagination_add_row=\"table\",\n    layout=\"fitColumns\",\n    index=\"PassengerId\",\n    add_row_pos=\"top\",\n    selectable=True,\n    history=True,\n)\n\n# Shiny Express App\n#\nui.h1(\"Interactive Table\", style=\"padding: 10px;\")\n\nui.input_action_button(\"trigger_download\", \"Download\")\nui.input_action_button(\"add_row\", \"Add row\")\nui.input_action_button(\"delete_selected_rows\", \"Delete selected rows\")\nui.input_action_button(\"undo\", \"Undo\")\nui.input_action_button(\"redo\", \"Redo\")\nui.input_action_button(\"trigger_get_data\", \"Submit data\")\n\nui.div(\n    ui.input_text(\"name\", \"Click on 'Add row' to add the Person to the table.\"),\n    style=\"padding-top: 20px;\",\n)\nui.div(\"Click on rows to print name.\", style=\"padding: 10px;\"),\n\n\n@render.code\nasync def txt():\n    print(input.tabulator_row_clicked())\n    return input.tabulator_row_clicked()[\"Name\"]\n\n\nui.div(\"Select multiple rows to print names of selected rows.\", style=\"padding: 10px;\"),\n\n\n@render.code\ndef selected_rows():\n    data = input.tabulator_rows_selected()\n    output = [item[\"Name\"] for item in data]\n    return \"\\n\".join(output)\n\n\n@render_tabulator\ndef tabulator():\n    return Tabulator(df, table_options)\n\n\n@reactive.Effect\n@reactive.event(input.trigger_download)\nasync def trigger_download():\n    print(\"download triggered\")\n    async with TabulatorContext(\"tabulator\") as table:\n        table.trigger_download(\"csv\")\n\n\n@reactive.Effect\n@reactive.event(input.add_row)\nasync def add_row():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.add_row(\n            {\n                \"Name\": input.name() or \"Hans\",\n                \"Age\": randrange(55),\n                \"Survived\": randrange(2),\n                \"PassengerId\": randrange(10000, 20000, 1),\n                \"SibSp\": randrange(9),\n            }\n        )\n\n\n@reactive.Effect\n@reactive.event(input.delete_selected_rows)\nasync def delete_selected_rows():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.delete_selected_rows()\n\n\n@reactive.Effect\n@reactive.event(input.undo)\nasync def undo():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.undo()\n\n\n@reactive.Effect\n@reactive.event(input.redo)\nasync def redo():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.redo()\n\n\n@reactive.Effect\n@reactive.event(input.trigger_get_data)\nasync def trigger_get_data():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.trigger_get_data()\n\n\n@reactive.Effect\n@reactive.event(input.tabulator_data)\ndef tabulator_data():\n    print(input.tabulator_data()[0])\n</code></pre>"},{"location":"example/","title":"Example","text":"<pre><code>from random import randrange\n\nimport pandas as pd\nfrom pytabulator import TableOptions, Tabulator, TabulatorContext, render_tabulator\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\n# Fetch data\n#\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n)\n\n# Setup\n#\ntable_options = TableOptions(\n    height=400,\n    pagination=True,\n    pagination_add_row=\"table\",\n    layout=\"fitColumns\",\n    index=\"PassengerId\",\n    add_row_pos=\"top\",\n    selectable=True,\n    history=True,\n)\n\n# Shiny Express App\n#\nui.h1(\"Interactive Table\", style=\"padding: 10px;\")\n\nui.input_action_button(\"trigger_download\", \"Download\")\nui.input_action_button(\"add_row\", \"Add row\")\nui.input_action_button(\"delete_selected_rows\", \"Delete selected rows\")\nui.input_action_button(\"undo\", \"Undo\")\nui.input_action_button(\"redo\", \"Redo\")\nui.input_action_button(\"trigger_get_data\", \"Submit data\")\n\nui.div(\n    ui.input_text(\"name\", \"Click on 'Add row' to add the Person to the table.\"),\n    style=\"padding-top: 20px;\",\n)\nui.div(\"Click on rows to print name.\", style=\"padding: 10px;\"),\n\n\n@render.code\nasync def txt():\n    print(input.tabulator_row_clicked())\n    return input.tabulator_row_clicked()[\"Name\"]\n\n\nui.div(\"Select multiple rows to print names of selected rows.\", style=\"padding: 10px;\"),\n\n\n@render.code\ndef selected_rows():\n    data = input.tabulator_rows_selected()\n    output = [item[\"Name\"] for item in data]\n    return \"\\n\".join(output)\n\n\n@render_tabulator\ndef tabulator():\n    return Tabulator(df, table_options)\n\n\n@reactive.Effect\n@reactive.event(input.trigger_download)\nasync def trigger_download():\n    print(\"download triggered\")\n    async with TabulatorContext(\"tabulator\") as table:\n        table.trigger_download(\"csv\")\n\n\n@reactive.Effect\n@reactive.event(input.add_row)\nasync def add_row():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.add_row(\n            {\n                \"Name\": input.name() or \"Hans\",\n                \"Age\": randrange(55),\n                \"Survived\": randrange(2),\n                \"PassengerId\": randrange(10000, 20000, 1),\n                \"SibSp\": randrange(9),\n            }\n        )\n\n\n@reactive.Effect\n@reactive.event(input.delete_selected_rows)\nasync def delete_selected_rows():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.delete_selected_rows()\n\n\n@reactive.Effect\n@reactive.event(input.undo)\nasync def undo():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.undo()\n\n\n@reactive.Effect\n@reactive.event(input.redo)\nasync def redo():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.redo()\n\n\n@reactive.Effect\n@reactive.event(input.trigger_get_data)\nasync def trigger_get_data():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.trigger_get_data()\n\n\n@reactive.Effect\n@reactive.event(input.tabulator_data)\ndef tabulator_data():\n    print(input.tabulator_data()[0])\n</code></pre>"},{"location":"table/","title":"Table","text":"<p>The table configuration is set with <code>TableOptions</code>:</p> <pre><code>from pytabulator import TableOptions\n\ntable_options = TableOptions(\n    layout=\"fitData\",\n    height=\"600px\",\n    pagination=True,\n    selectable=True\n)\n</code></pre> <p>The table options can either be passed to the render decorator:</p> <pre><code>from pandas import read_csv\nfrom pytabulator import render_data_frame, TableOptions\n\ndf = read_csv(\"titanic.csv\")\n\ntable_options = TableOptions(\n    height=\"600px\",\n    pagination=True\n)\n\n@render_data_frame(table_options=table_options)\ndef tabulator():\n    return df\n</code></pre> <p>Or to the <code>Tablulator</code> object:</p> <pre><code>from pandas import read_csv\nfrom pytabulator import render_tabulator, TableOptions, Tabulator\n\ndf = read_csv(\"titanic.csv\")\n\ntable_options = TableOptions(\n    height=\"600px\",\n    pagination=True\n)\n\n@render_tabulator\ndef tabulator():\n    return Tabulator(df, table_options=table_options)\n</code></pre>"}]}