{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Tabulator for Python","text":"<p>Tabulator for Python provides Shiny for Python bindings for Tabulator JS.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install git+https://github.com/eodaGmbH/py-tabulator\n</code></pre>"},{"location":"#getting-started","title":"Getting started","text":"<p>Shiny Express:</p> <pre><code>import pandas as pd\nfrom pytabulator import TabulatorOptions, render_data_frame\nfrom shiny import render\nfrom shiny.express import input, ui\n\nui.div(\"Click on row to print name\", style=\"padding: 10px;\")\n\n\n@render.code\nasync def txt():\n    print(input.tabulator_row())\n    return input.tabulator_row()[\"Name\"]\n\n\n@render_data_frame(table_options=TabulatorOptions(height=\"500px\"))\ndef tabulator():\n    return pd.read_csv(\n        \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n    )\n</code></pre> <pre><code>shiny run docs/examples/getting_started/shiny_express_all.py\n</code></pre>"},{"location":"events/","title":"Events","text":"<p>Tabular for Python provides the following reactive inputs:</p> <ul> <li><code>row-on-click</code> event: Sends the data of the selected row</li> <li><code>row-edited</code> event: Sends the data of the edited row</li> <li><code>data</code>: Sends the complete data of the table</li> </ul>"},{"location":"example/","title":"Example","text":"<pre><code>import pandas as pd\nfrom pytabulator.shiny_bindings import render_data_frame, render_tabulator\nfrom pytabulator.tabulator import Tabulator, TabulatorOptions\nfrom pytabulator.tabulator_context import TabulatorContext\nfrom shiny import reactive, render\nfrom shiny.express import input, ui\n\nui.h1(\"Interactive Table\", style=\"padding: 10px;\")\n\nui.input_action_button(\"trigger_download\", \"Download\")\nui.input_action_button(\"add_row\", \"Add row\")\nui.input_action_button(\"delete_selected_rows\", \"Delete selected rows\")\nui.input_action_button(\"undo\", \"Undo\")\nui.input_action_button(\"redo\", \"Redo\")\nui.input_action_button(\"trigger_get_data\", \"Get data\")\n\nui.div(\"Click on row to print name.\", style=\"padding: 10px;\")\n\n\n@render.code\nasync def txt():\n    print(input.tabulator_row())\n    return input.tabulator_row()[\"Name\"]\n\n\n@reactive.Effect\n@reactive.event(input.trigger_download)\nasync def trigger_download():\n    print(\"download triggered\")\n    async with TabulatorContext(\"tabulator\") as table:\n        table.trigger_download(\"json\")\n\n\n@reactive.Effect\n@reactive.event(input.add_row)\nasync def add_row():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.add_row({\"Name\": \"Hans\", \"Sex\": \"male\"})\n\n\n@reactive.Effect\n@reactive.event(input.delete_selected_rows)\nasync def delete_selected_rows():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.delete_selected_rows()\n\n\n@reactive.Effect\n@reactive.event(input.undo)\nasync def undo():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.undo()\n\n\n@reactive.Effect\n@reactive.event(input.redo)\nasync def redo():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.redo()\n\n\n@reactive.Effect\n@reactive.event(input.trigger_get_data)\nasync def trigger_get_data():\n    async with TabulatorContext(\"tabulator\") as table:\n        table.trigger_get_data()\n\n\n@reactive.Effect\n@reactive.event(input.tabulator_data)\ndef tabulator_data():\n    print(input.tabulator_data()[0])\n\n\n@render_tabulator\ndef tabulator():\n    df = pd.read_csv(\n        \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n    )\n    return Tabulator(\n        df,\n        TabulatorOptions(\n            height=\"600px\",\n            pagination=True,\n            paginationAddRow=\"table\",\n            layout=\"fitColumns\",\n            index=\"PassengerId\",\n            addRowPos=\"top\",\n            selectable=True,\n            history=True,\n            # editor=True,\n        ),\n    )\n</code></pre>"}]}